
// Defines system constants Canvas Element constructors,

//install './system.js';

install {%
  function (installer) {
    // Sets the gradient mutator,
    function gradientMutator(fill_style) {
      return {
        addColorStop: function(args) {
          fill_style.addColorStop(args.stop, args.color);
        }
      };
    }
    
    // Converts a color style into a format useable in a Context2D
    function colorStyle(color_desc, default_desc) {
      var color_desc_type = typeof color_desc;
      if (color_desc_type !== 'undefined') {
        if (color_desc_type === 'string') {
          return color_desc;
        }
        else {
          // This must be an object of type LinearGradient or RadialGradient,
          // Check object type?
          return color_desc.val;
        }
      }
      // Otherwise return the default description (could be undefined),
      return default_desc;
    }
    
    installer.gradientMutator = gradientMutator;
    installer.colorStyle = colorStyle;
  }
%}

// ----- System object constructors -----

// LinearGradient implementation
const LinearGradient = {%
  function LinearGradient(args, context) {
    context.assertConstructor();

    var vn_screen = context.getVNScreen();
    var out = {
      args:args
    }
    var fill_style = vn_screen.get2DContext().createLinearGradient(
                          args.x1, args.y1, args.x2, args.y2);
    // Define the mutator,
    out.mutators = context.install.gradientMutator(fill_style);
    out.val = fill_style;
    return out;
  }
%}



// RadialGradient implementation
const RadialGradient = {%
  function RadialGradient(args, context) {
    context.assertConstructor();

    var vn_screen = context.getVNScreen();
    var out = {
      args:args
    }
    var fill_style = vn_screen.get2DContext().createRadialGradient(
                          args.x1, args.y1, args.r1, args.x2, args.y2, args.r2);
    // Define the mutator,
    out.mutators = context.install.gradientMutator(fill_style);
    out.val = fill_style;
    return out;
  }
%}



const Group = {%
  function Group(args, context) {
    context.assertConstructor();
    return context.system.Group(args, context);
  }
%}



// A TextTrail object,
const TextTrail = {%

  // Anon-self invoking function to allow for constants,
  (function() {

    var DEFAULT_TTRAIL_CONFIG = {
      font_family: 'sans-serif',
      font_size: '25px',
      font_color: '#ffffff',
      pixels_between_words: 7,
      line_height: 30
    };

    return function TextTrail(args, context) {
      context.assertConstructor();

      var mergeConfig = context.lib.utils.mergeConfig;
      var vn_screen = context.getVNScreen();
      
      var ttconfig = {};
      if (args.width !== void 0) ttconfig.buffer_width = args.width;
      if (args.height !== void 0) ttconfig.buffer_height = args.height;

      ttconfig = mergeConfig(ttconfig, args);
      ttconfig = mergeConfig(ttconfig, DEFAULT_TTRAIL_CONFIG);
      
      var text_trail_ce = context.lib.TextTrail(vn_screen, ttconfig);
      vn_screen.addCanvasElement(text_trail_ce);
      
      var out = {
        args: args,
        el: text_trail_ce
      };

      context.setElementStyle(out, args, { buffer_width:-1, buffer_height:-1 } );
      return out;
    }

  })()

%}



// Rectangle CanvasElement,
const Rectangle = {%
  function Rectangle(args, context) {
    context.assertConstructor();

    // Create the canvas element object,
    var rectangle_ce = context.createDrawCanvasElement( args );

    // The draw function for this element,
    rectangle_ce.setDrawFunction( function(ctx2d, time, vns) {

      // The current styling of the element,
      var cstyle = rectangle_ce.getStyles();

      var roundedRect = context.lib.graphics.roundedRect;
      roundedRect(ctx2d, -(cstyle.width / 2), -(cstyle.height / 2), cstyle.width, cstyle.height, cstyle.corner_radius );

      var fill_st = context.install.colorStyle(cstyle.fill_style);
      if (fill_st !== void 0) {
        ctx2d.fillStyle = fill_st;
        ctx2d.fill();
      }
      var stroke_st = context.install.colorStyle(cstyle.stroke_style);
      if (stroke_st !== void 0) {
        ctx2d.strokeStyle = stroke_st;
        if (cstyle.line_width !== void 0) {
          ctx2d.lineWidth = cstyle.line_width;
        }
        else {
          ctx2d.lineWidth = 1;
        }
        ctx2d.stroke();
      }

    });

    return rectangle_ce;

  }
%}



// Rectangle with checkered pattern. Used to render transparent background.
const CheckeredRectangle = {%
  function CheckeredRectangle(args, context) {
    context.assertConstructor();
    
    // Create the canvas element object,
    var checkered_ce = context.createDrawCanvasElement( args );

    // The draw function for this element,
    checkered_ce.setDrawFunction( function(ctx2d, time, vns) {

      // The current styling of the element,
      var cstyle = checkered_ce.getStyles();

      var square_size = cstyle.square_size;
      if (square_size === void 0) {
        square_size = 64;
      }
      var rwidth = cstyle.width === void 0 ? 1280 : cstyle.width;
      var rheight = cstyle.height === void 0 ? 720 : cstyle.height;

      var screen_tl_x = -(rwidth / 2);
      var screen_tl_y = -(rheight / 2);

      ctx2d.fillStyle = context.install.colorStyle(cstyle.square_color1, 'hsl(220, 0%, 96%)');
      ctx2d.fillRect(screen_tl_x, screen_tl_y, rwidth, rheight);
      ctx2d.fillStyle = context.install.colorStyle(cstyle.square_color1, 'hsl(220, 0%, 89%)');

      for (var ty = -1; ty < (rheight / square_size); ++ty) {
        for (var tx = 0; tx < (rwidth / square_size); ++tx) {
          if (((tx + ty) & 0x01) === 0) {
            ctx2d.fillRect(screen_tl_x + (tx * square_size), screen_tl_y + (ty * square_size) + 8,
                           square_size, square_size);
          }
        }
      }

    });

    return checkered_ce;
  }
%}






// A CanvasElement object that draws a single line of text centered on the canvas element's
// location.
const TextArt = {%
  function TextArt(args, context) {
    context.assertConstructor();
    
    // Defaults,
    var config = {
      trail_width:          1280,
      trail_height:         100,
      pixels_between_words: 8,
      text_halign:          "center"
    };
    for (prop in args) {
      config[prop] = args[prop];
    }
    var formatter = context.lib.TextFormatter(config);

    var cur_text;
    var measured_text;

    // Create the canvas element object,
    var text_art = context.createDrawCanvasElement( config );
    
    // The draw function for this element,
    text_art.setDrawFunction( function(ctx2d, time, vns) {

      var cstyle = text_art.getStyles();
      
      // Get the text content,
      var text_to_draw = cstyle.text;
      if (cur_text !== text_to_draw) {
        // Do we need to measure it?
        // If the text changed since the last call it is re-measured here,
        cur_text = text_to_draw;
        measured_text = formatter.measureAndLayout(cur_text);
      }

      // Position and draw each word,
      var dx = -(cstyle.trail_width / 2);
      var words_ar = measured_text.words_ar;
      for (var i = 0; i < words_ar.length; ++i) {
        var w = words_ar[i];
        ctx2d.font = w.word.style.fontSizeAndFamily;
        ctx2d.fillStyle = w.word.style.fontColor;
        ctx2d.fillText(w.word.text, dx + w.x, 0);
      }

    });

    return text_art;

  }
%}



// Defines a set of areas on the screen that can receive events such as
// mouse hover, taps, gestures, etc.
const HitGroup = {%
  function HitGroup(args, context) {
    context.assertConstructor();

    var vn_screen = context.getVNScreen();
    var hit_areas = {};
    var out = {
      hit_areas: hit_areas,
      args:args
    }
    // Define the mutator,
    out.mutators = {
      addHitBox: function(args) {
        // Turn hit box into a rectangle polygon,
        var hit_name = args.default;
        var target_style = context.convertToRawStyles(args, { 'default':-1 } );
        var x = target_style.x - (target_style.width / 2);
        var y = target_style.y - (target_style.height / 2);
        var width = target_style.width;
        var height = target_style.height;
        var polygon = [ [ x, y ], [ x + width, y ],
                        [ x + width, y + height ], [ x, y + height ] ];
        // Add to the hit area,
        hit_areas[hit_name] = { type:'box', args:args, polygon:polygon };
      }
    };
    return out;

  }
%}


// ----- System call library -----


const debug = {%
  function debug(args, context, resolve, reject) {
    context.assertFunction();

    if ('default' in args) {
      console.log(args.default);
    }
    for (var a in args) {
      if (a === 'default') {
        continue;
      }
      console.log(a + " = ", args[a]);
    }
    
    // Complete,
    resolve();
  }
%}



const preloadAssets = {%
  function preloadAssets(args, context, resolve, reject) {
    context.assertFunction();

    var to_preload = args.default;
    console.error("PENDING: preloadAssets for: ", to_preload);
    // Complete,
    resolve();
  }
%}



const preloadFont = {%
  function preloadFont(args, context, resolve, reject) {
    context.assertFunction();

    var font_family = args.default;
    context.getVNScreen().preloadFont(font_family, function() {
      // Complete,
      resolve();
    });
  }
%}



const setDefaultTextTrail = {%
  function setDefaultTextTrail(args, context, resolve, reject) {
    context.assertFunction();
    
    var text_trail = args.default;
    var enter = args.enter;
    var exit = args.exit;

    // Set the default text trail,
    context.setTextTrail('default', text_trail, enter, exit);
    
    // Complete,
    resolve();
  }
%}



const setTextTrail = {%
  function setTextTrail(args, context, resolve, reject) {
    context.assertFunction();
    
    var text_trail = args.default;
    var tt_name = args.name;
    var enter = args.enter;
    var exit = args.exit;
    
    context.setTextTrail(tt_name, text_trail, enter, exit);
    
    // Complete,
    resolve();
  }
%}



const setStyle = {%
  function setStyle(args, context, resolve, reject) {
    context.assertFunction();
    
    var element = args.default;
    context.setElementStyle(element, args, { 'default':-1 } );
    // Repaint the screen,
    context.getVNScreen().repaint();
    
    // Complete,
    resolve();
  }
%}



const setTargetStyle = {%
  function setTargetStyle(args, context, resolve, reject) {
    context.assertFunction();

    var element = args.default;
    var target_style = context.convertToRawStyles(args, { 'default':-1 } );

    element.target_style = target_style;
    
    // Complete,
    resolve();
  }
%}



const interpolate = {%
  function interpolate(args, context, resolve, reject) {
    context.assertFunction();
    
    var element = args.default;
    var time = args.time;
    var easing = args.easing;

    context.addInterpolations(element.el, element.target_style, time, easing);
    
    // Complete,
    resolve();
  }
%}



const switchOnAnimation = {%
  function switchOnAnimation(args, context, resolve, reject) {
    context.assertFunction();

    var element = args.default;
    var cycle_name = args.name;

    context.switchOnAnimation(element.el, cycle_name);

    // Complete,
    resolve();
  }
%}



const switchOffAnimation = {%
  function switchOffAnimation(args, context, resolve, reject) {
    context.assertFunction();

    var element = args.default;
    var cycle_name = args.name;

    context.switchOffAnimation(element.el, cycle_name);

    // Complete,
    resolve();
  }
%}



const triggerAnimation = {%
  function triggerAnimation(args, context, resolve, reject) {
    context.assertFunction();
    
    var element = args.default;
    var trigger_animation_name = args.name;
    var speed = args.speed;

    context.triggerAnimation(element.el, trigger_animation_name, speed);
    
    // Complete,
    resolve();
  }
%}



const pushHitGroup = {%
  function pushHitGroup(args, context, resolve, reject) {
    context.assertFunction();

    var hit_group = args.default;

    context.pushHitGroup(hit_group);

    // Complete,
    resolve();
  }
%}



const popHitGroup = {%
  function popHitGroup(args, context, resolve, reject) {
    context.assertFunction();

    context.popHitGroup(hit_group);

    // Complete,
    resolve();
  }
%}



const announce = {%
  function announce(args, context, resolve, reject) {
    context.assertFunction();
    
    var vn_screen = context.getVNScreen();
    
    var text = args.default;
    var trail_target = args.trail;
    // The target trail to make the announcement,
    if (trail_target === void 0) {
      trail_target = 'default';
    }

    var text_trail = context.getTextTrail(trail_target);
    if (!text_trail.displayed) {
      text_trail.displayed = true;
      context.callSynchronousUserCode(text_trail.enter_fun, {});
    }

    // Measure and format the text to be displayed,
    text_trail.el.resetAnimationPoint();
    text_trail.el.measureAndLayoutText(text);

    // How long will it take to display this layout?
    var time_to_complete = text_trail.el.getTotalTimeMS();

    // The interpolation target,
    text_trail.el.getStyles().time = 0;
    var dstyle = { time: time_to_complete };
    // Start the animation interpolation,
    context.addInterpolations(text_trail.el, dstyle, time_to_complete / 1000, 'no-ease');

    var finish_cb = function() {
      // Clear the animation before we callback after interact,
      text_trail.el.clearAnimation();
      // Complete,
      var acopy = [];
      for (var i = 0; i < arguments.length; ++i) {
        acopy.push(arguments[i]);
      }
      resolve(acopy);
    };

    // The number of seconds to wait,
    var continueAfter = args.continueAfter;
    // Should we break on interact?
    var breakOnInteract = args.breakOnInteract;
    // Break on event?
    var breakOnEvent = args.breakOnEvent;
    // Do we break on event?
    if (breakOnEvent !== void 0) {
      vn_screen.onUserEvent(breakOnEvent, finish_cb);
    }
    // Do we not allow interact to break the wait?
    if (breakOnInteract === false) {
      // So just wait,
      if (continueAfter === void 0) {
        finish_cb();
      }
      else {
        vn_screen.setWaitCallback(continueAfter, finish_cb);
      }
    }
    else {
      if (breakOnEvent === void 0 || breakOnInteract === true) {
        if (continueAfter === void 0) {
          vn_screen.setInteractCallback(finish_cb);
        }
        else {
          vn_screen.setInteractOrWaitCallback(continueAfter, finish_cb);
        }
      }
    }
    
  }
%}



const wait = {%
  function wait(args, context, resolve, reject) {
    context.assertFunction();
    
    var vn_screen = context.getVNScreen();

    var finish_cb = function() {
      // Complete,
      var acopy = [];
      for (var i = 0; i < arguments.length; ++i) {
        acopy.push(arguments[i]);
      }
      resolve(acopy);
    };

    // The number of seconds to wait,
    var continueAfter = args.continueAfter;
    // Should we break on interact?
    var breakOnInteract = args.breakOnInteract;
    // Break on event?
    var breakOnEvent = args.breakOnEvent;
    // Do we break on event?
    if (breakOnEvent !== void 0) {
      vn_screen.onUserEvent(breakOnEvent, finish_cb);
    }
    // Do we not allow interact to break the wait?
    if (breakOnInteract === false) {
      // So just wait,
      if (continueAfter === void 0) {
        finish_cb();
      }
      else {
        vn_screen.setWaitCallback(continueAfter, finish_cb);
      }
    }
    else {
      if (breakOnEvent === void 0 || breakOnInteract === true) {
        if (continueAfter === void 0) {
          vn_screen.setInteractCallback(finish_cb);
        }
        else {
          vn_screen.setInteractOrWaitCallback(continueAfter, finish_cb);
        }
      }
    }

  }
%}




// Default system elements,

const transparent_background = CheckeredRectangle(
    depth:1,
    width:1280, height:720,
    x:'50%', y:'50%',
    alpha:1,
  );

