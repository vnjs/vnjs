
// Defines system constants Canvas Element constructors,

// ----- System object constructors -----

// LinearGradient implementation
const LinearGradient = {%
  function (args, context) {
    context.assertConstructor();

    var vn_screen = context.getVNScreen();
    var out = {
      args,
    }
    var fill_style = vn_screen.get2DContext().createLinearGradient(
                          args.x1, args.y1, args.x2, args.y2);
    // Define the mutator,
    out.mutators = {
      addColorStop: function(args) {
        fill_style.addColorStop(args.stop, args.color);
      }
    };
    out.val = fill_style;
    return out;
  }
%}



// RadialGradient implementation
const RadialGradient = {%
  function (args, context) {
    context.assertConstructor();

    var vn_screen = context.getVNScreen();
    var out = {
      args,
    }
    var fill_style = vn_screen.get2DContext().createRadialGradient(
                          args.x1, args.y1, args.r1, args.x2, args.y2, args.r2);
    // Define the mutator,
    out.mutators = {
      addColorStop: function(args) {
        fill_style.addColorStop(args.stop, args.color);
      }
    };
    out.val = fill_style;
    return out;
  }
%}



const Group = {%
  function (args, context) {
    context.assertConstructor();
    return context.system.Group(args, context);
  }
%}



// A TextTrail object,
const TextTrail = {%

  // Anon-self invoking function to allow for constants,
  (function() {

    var DEFAULT_TTRAIL_CONFIG = {
      font_family: 'sans-serif',
      font_size: '25px',
      font_color: '#ffffff',
      pixels_between_words: 7,
      line_height: 30
    };

    return function (args, context) {
      context.assertConstructor();

      var mergeConfig = context.lib.utils.mergeConfig;
      var vn_screen = context.getVNScreen();
      
      var ttconfig = {};
      if (args.width !== void 0) ttconfig.buffer_width = args.width;
      if (args.height !== void 0) ttconfig.buffer_height = args.height;

      ttconfig = mergeConfig(ttconfig, args);
      ttconfig = mergeConfig(ttconfig, DEFAULT_TTRAIL_CONFIG);
      
      var text_trail_ce = context.lib.TextTrail(vn_screen, ttconfig);
      vn_screen.addCanvasElement(text_trail_ce);
      
      var out = {
        args: args,
        el: text_trail_ce
      };

      context.setElementStyle(out, args, { buffer_width:-1, buffer_height:-1 } );
      return out;
    }

  })()

%}



// Rectangle CanvasElement,
const Rectangle = {%
  function (args, context) {
    context.assertConstructor();

    // Create the canvas element object,
    var rectangle_ce = context.createDrawCanvasElement( args );

    // The draw function for this element,
    rectangle_ce.setDrawFunction( function(ctx2d, vns) {

      // The current styling of the element,
      var cstyle = rectangle_ce.getStyles();

      var roundedRect = context.lib.graphics.roundedRect;
      roundedRect(ctx2d, -(cstyle.width / 2), -(cstyle.height / 2), cstyle.width, cstyle.height, cstyle.corner_radius );

      var type_fill_style = typeof cstyle.fill_style;
      if (type_fill_style !== 'undefined') {
        if (type_fill_style === 'string') {
          ctx2d.fillStyle = cstyle.fill_style;
        }
        else {
          // This must be an object of type LinearGradient or RadialGradient,
          // Check object type?
          ctx2d.fillStyle = cstyle.fill_style.val;
        }
        ctx2d.fill();
      }
      if (cstyle.stroke_style !== void 0) {
        ctx2d.strokeStyle = cstyle.stroke_style;
        if (cstyle.line_width !== void 0) {
          ctx2d.lineWidth = cstyle.line_width;
        }
        else {
          ctx2d.lineWidth = 1;
        }
        ctx2d.stroke();
      }

    });

    return rectangle_ce;

  }
%}



// A CanvasElement object that draws a single line of text centered on the canvas element's
// location.
const TextArt = {%
  function (args, context) {
    context.assertConstructor();
    
    // Defaults,
    var config = {
      trail_width:          1280,
      trail_height:         100,
      pixels_between_words: 8,
      text_halign:          "center"
    };
    for (prop in args) {
      config[prop] = args[prop];
    }
    var formatter = context.lib.TextFormatter(config);

    var cur_text;
    var measured_text;

    // Create the canvas element object,
    var text_art = context.createDrawCanvasElement( config );
    
    // The draw function for this element,
    text_art.setDrawFunction( function(ctx2d, vns) {

      var cstyle = text_art.getStyles();
      
      // Get the text content,
      var text_to_draw = cstyle.text;
      if (cur_text !== text_to_draw) {
        // Do we need to measure it?
        // If the text changed since the last call it is re-measured here,
        cur_text = text_to_draw;
        measured_text = formatter.measureAndLayout(cur_text);
      }

      // Position and draw each word,
      var dx = -(cstyle.trail_width / 2);
      var words_ar = measured_text.words_ar;
      for (var i = 0; i < words_ar.length; ++i) {
        var w = words_ar[i];
        ctx2d.font = w.word.style.fontSizeAndFamily;
        ctx2d.fillStyle = w.word.style.fontColor;
        ctx2d.fillText(w.word.text, dx + w.x, 0);
      }

    });

    return text_art;

  }
%}


// ----- System call library -----


const debug = {%
  function(args, context, resolve, reject) {
    context.assertFunction();

    if ('default' in args) {
      console.log(args.default);
    }
    for (var a in args) {
      if (a === 'default') {
        continue;
      }
      console.log(a + " = ", args[a]);
    }
    
    // Complete,
    resolve();
  }
%}



const preloadAssets = {%
  function(args, context, resolve, reject) {
    context.assertFunction();

    var to_preload = args.default;
    console.error("PENDING: preloadAssets for: ", to_preload);
    // Complete,
    resolve();
  }
%}



const preloadFont = {%
  function(args, context, resolve, reject) {
    context.assertFunction();

    var font_family = args.default;
    context.getVNScreen().preloadFont(font_family, function() {
      // Complete,
      resolve();
    });
  }
%}



const setDefaultTextTrail = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var text_trail = args.default;
    var enter = args.enter;
    var exit = args.exit;

    // Set the default text trail,
    context.setTextTrail('default', text_trail, enter, exit);
    
    // Complete,
    resolve();
  }
%}



const setTextTrail = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var text_trail = args.default;
    var tt_name = args.name;
    var enter = args.enter;
    var exit = args.exit;
    
    context.setTextTrail(tt_name, text_trail, enter, exit);
    
    // Complete,
    resolve();
  }
%}



const setStyle = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var element = args.default;
    context.setElementStyle(element, args, { 'default':-1 } );
    // Repaint the screen,
    context.getVNScreen().repaint();
    
    // Complete,
    resolve();
  }
%}



const setTargetStyle = {%
  function(args, context, resolve, reject) {
    context.assertFunction();

    var element = args.default;
    var target_style = context.convertToRawStyles(args, { 'default':-1 } );

    element.target_style = target_style;
    
    // Complete,
    resolve();
  }
%}



const animate = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var element = args.default;
    var time = args.time;
    var easing = args.easing;

    context.addInterpolations(element.el, element.target_style, time, easing);
    
    // Complete,
    resolve();
  }
%}



const announce = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var vn_screen = context.getVNScreen();
    
    var text = args.default;
    var trail_target = args.trail;
    // The target trail to make the announcement,
    if (trail_target === void 0) {
      trail_target = 'default';
    }
    // After, should we wait for interaction? (default: wait on interact)
    var until = args.until;
    var continueAfter = args.continueAfter;
    // Should we break on interact?
    var breakOnInteract = args.breakOnInteract;

    var text_trail = context.getTextTrail(trail_target);
    if (!text_trail.displayed) {
      text_trail.displayed = true;
      context.callUserCode(text_trail.enter_fun, {});
    }

    // Measure and format the text to be displayed,
    text_trail.el.resetAnimationPoint();
    text_trail.el.measureAndLayoutText(text);

    // How long will it take to display this layout?
    var time_to_complete = text_trail.el.getTotalTimeMS();

    // The interpolation target,
    text_trail.el.getStyles().time = 0;
    var dstyle = { time: time_to_complete };
    // Start the animation interpolation,
    context.addInterpolations(text_trail.el, dstyle, time_to_complete / 1000, 'no-ease');

    var finish_cb = function() {
      // Clear the animation before we callback after interact,
      text_trail.el.clearAnimation();
      // Complete,
      resolve();
    };
    // Do we not allow interact to break the wait?
    if (breakOnInteract === false) {
      // So just wait,
      if (continueAfter === void 0) {
        finish_cb();
      }
      else {
        vn_screen.setWaitCallback(continueAfter, finish_cb);
      }
    }
    else {
      if (continueAfter === void 0) {
        vn_screen.setInteractCallback(finish_cb);
      }
      else {
        vn_screen.setInteractOrWaitCallback(continueAfter, finish_cb);
      }
    }
    
  }
%}



const wait = {%
  function(args, context, resolve, reject) {
    context.assertFunction();
    
    var vn_screen = context.getVNScreen();

    // The number of seconds to wait,
    var continueAfter = args.continueAfter;
    // Should we break on interact?
    var breakOnInteract = args.breakOnInteract;

    var finish_cb = function() {
      // Complete,
      resolve();
    };
    // Do we not allow interact to break the wait?
    if (breakOnInteract === false) {
      // So just wait,
      if (continueAfter === void 0) {
        finish_cb();
      }
      else {
        vn_screen.setWaitCallback(continueAfter, finish_cb);
      }
    }
    else {
      if (continueAfter === void 0) {
        vn_screen.setInteractCallback(finish_cb);
      }
      else {
        vn_screen.setInteractOrWaitCallback(continueAfter, finish_cb);
      }
    }

  }
%}

