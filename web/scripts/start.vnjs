
/* global screen, constants, wait */




function test() {
    const a = 'message';
    return "This is a " + a + " returned by function: %s";
}


function makeMessage(i) {
    return "This is number: " + i;
}


function makein(myval) {
    return function() {
        if (true) {
            console.log('Hey, this is an inner class: %s', myval);
        }
        else {
            console.log("Hmmm...");
        }
    };
}


function mm(myval) {

    function getVal() {
        return myval;
    }

    function setVal(val) {
        myval = val;
    }

    return {
        getVal,
        setVal
    };

}


function array(arr) {

    function forEach(cb) {
        let i = 0;
        const len = arr.length;
        while (i < len) {
            cb(arr[i], i);
            i += 1;
        }
    }

    function copyToArr(cl, out) {
        let i = 0;
        const len = arr.length;
        while (i < len) {
            out.push(cl(arr[i], i));
            i += 1;
        }
    }

    return {
        forEach,
        copyToArr
    };
}


function run() {

//    console.log("HELLO WORLD!");

    const m = mm('hello');
    console.log("Result of m.getVal() = %s", m.getVal());
    m.setVal('goodbye');
    console.log("Result of m.getVal() = %s", m.getVal());

    const nf = makein('Hey, we made a function with some inner variables...');
    nf();

    const marr = [ 'man', 'bot', 'singed' ];

    let i = 0;
    while (i < 100) {
        array(marr).forEach((v, i) => {
//            console.log("marr[%s]: %s = %s", i, v, marr[i]);
        });
        marr.push('index:' + (i + 1));
        i += 1;
    }
//    console.log("FINISH ARRAY: %j", marr);

    const outarr = [];

    array(marr).copyToArr(
        (v, i) => ({ val: v, zi: i }),
        outarr
    );

    console.log(outarr);

    const zoo = JSON.parse('{"a":3}');

    const deg = 35;
    const dif = [ Math.cos(deg * Math.PI / 180),
                  Math.sin(deg * Math.PI / 180) ];

    return dif;

}



// Start entry point

function main() {

    const {
        addElement,
        element,
    } = screen;

    // Background element is automatically set to layer -100
    addElement(constants.checkeredBackground);

    // Create wilma character element,
    const wilma = element({
        name: 'Wilma',
        base: 'characters/test_character_wilma.png',
        layer: 1,
        x: 0,
        y: 0,
        alpha: 1,
    });

    // Add wilma,
    addElement(wilma);

    // Transaction animation for wilma,
    wilma.animateTo({ x: 400 }, 0.5, constants.linearTransform);

    // Print test message from other function,
    console.log(test());

    // Wait until interaction interrupts this,
    wait();

}
